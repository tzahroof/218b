<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\BaseTarget.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\BaseTarget.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Tue Mar 06 04:00:50 2018
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
InitMasterSM &rArr; InitDetecterService &rArr; PWM_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[29]">Reset_Handler</a>
 <LI><a href="#[4d]">__user_initial_stackheap</a>
 <LI><a href="#[3]">NmiSR</a>
 <LI><a href="#[4]">FaultISR</a>
 <LI><a href="#[5]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9e]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9e]">UARTCharPut</a><BR>
 <LI><a href="#[3]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NmiSR</a><BR>
 <LI><a href="#[4]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">FaultISR</a><BR>
 <LI><a href="#[5]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IntDefaultHandler</a><BR>
 <LI><a href="#[40]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">SysCtlDelay</a><BR>
 <LI><a href="#[3f]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ControlLaw</a> from motorservice.o(i.ControlLaw) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">DetecterInterruptResponse</a> from detecter_service.o(i.DetecterInterruptResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">GameStatusEventChecker</a> from spi.o(i.GameStatusEventChecker) referenced from es_checkevents.o(.constdata)
 <LI><a href="#[1f]">InitDefence</a> from defenceservice.o(i.InitDefence) referenced from es_framework.o(.constdata)
 <LI><a href="#[17]">InitMasterSM</a> from mastersm.o(i.InitMasterSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[1d]">InitOffence</a> from offenceservice.o(i.InitOffence) referenced from es_framework.o(.constdata)
 <LI><a href="#[1b]">InitReload</a> from reloadservice.o(i.InitReload) referenced from es_framework.o(.constdata)
 <LI><a href="#[21]">InitShooter</a> from shooterservice.o(i.InitShooter) referenced from es_framework.o(.constdata)
 <LI><a href="#[19]">InitTapeDetectorService</a> from tapedetectorservice.o(i.InitTapeDetectorService) referenced from es_framework.o(.constdata)
 <LI><a href="#[13]">InitTestHarnessService0</a> from testharnessservice0.o(i.InitTestHarnessService0) referenced from es_framework.o(.constdata)
 <LI><a href="#[a]">InputCaptureResponse</a> from motorservice.o(i.InputCaptureResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">InputCaptureResponse2</a> from motorservice.o(i.InputCaptureResponse2) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 105 times from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">LFControlLaw</a> from reloadservice.o(i.LFControlLaw) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[24]">PostDefence</a> from defenceservice.o(i.PostDefence) referenced from es_timers.o(.constdata)
 <LI><a href="#[26]">PostOffence</a> from offenceservice.o(i.PostOffence) referenced from es_timers.o(.constdata)
 <LI><a href="#[27]">PostReload</a> from reloadservice.o(i.PostReload) referenced from es_timers.o(.constdata)
 <LI><a href="#[25]">PostShooter</a> from shooterservice.o(i.PostShooter) referenced from es_timers.o(.constdata)
 <LI><a href="#[23]">PostStepService</a> from motorservice.o(i.PostStepService) referenced 2 times from es_timers.o(.constdata)
 <LI><a href="#[28]">PostTapeDetectorService</a> from tapedetectorservice.o(i.PostTapeDetectorService) referenced from es_timers.o(.constdata)
 <LI><a href="#[29]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[20]">RunDefence</a> from defenceservice.o(i.RunDefence) referenced from es_framework.o(.constdata)
 <LI><a href="#[18]">RunMasterSM</a> from mastersm.o(i.RunMasterSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[1e]">RunOffence</a> from offenceservice.o(i.RunOffence) referenced from es_framework.o(.constdata)
 <LI><a href="#[1c]">RunReload</a> from reloadservice.o(i.RunReload) referenced from es_framework.o(.constdata)
 <LI><a href="#[22]">RunShooter</a> from shooterservice.o(i.RunShooter) referenced from es_framework.o(.constdata)
 <LI><a href="#[16]">RunStepService</a> from motorservice.o(i.RunStepService) referenced from es_framework.o(.constdata)
 <LI><a href="#[1a]">RunTapeDetectorService</a> from tapedetectorservice.o(i.RunTapeDetectorService) referenced from es_framework.o(.constdata)
 <LI><a href="#[14]">RunTestHarnessService0</a> from testharnessservice0.o(i.RunTestHarnessService0) referenced from es_framework.o(.constdata)
 <LI><a href="#[7]">SPI_IntResponse</a> from spi.o(i.SPI_IntResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">SPI_PeriodicResponse</a> from spi.o(i.SPI_PeriodicResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">ShortTimerAHandler</a> from es_shorttimer.o(i.ShortTimerAHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">SysTickIntHandler</a> from es_port.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[11]">checkTowerDetected</a> from mastersm.o(i.checkTowerDetected) referenced from es_checkevents.o(.constdata)
 <LI><a href="#[f]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[15]">initializeStepService</a> from motorservice.o(i.initializeStepService) referenced from es_framework.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[44]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[31]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[b9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[38]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ba]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[be]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[cd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[cf]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[d1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[d2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[35]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[39]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[40]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[d7]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[d8]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[89]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[d9]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[da]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[db]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[dc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDefence
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDefence
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunOffence
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOffence
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitReload
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blastBeaconFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDetecterService
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTapeDetectorService
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTapeDetectorService
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameStatusEventChecker
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTestHarnessService0
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTowerDetected
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[43]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[48]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[30]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[46]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[47]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[49]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[32]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[42]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[36]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3b]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>AlignWithLineAction</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, reloadservice.o(i.AlignWithLineAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AlignWithLineAction &rArr; SETRPM
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETRPM
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
</UL>

<P><STRONG><a name="[5c]"></a>CPUgetPRIMASK_cpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, es_port.o(i.CPUgetPRIMASK_cpsid))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[5d]"></a>CPUsetPRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_port.o(i.CPUsetPRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[b]"></a>ControlLaw</STRONG> (Thumb, 766 bytes, Stack size 72 bytes, motorservice.o(i.ControlLaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ControlLaw &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DRIVE_STRAIGHT</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, motorservice.o(i.DRIVE_STRAIGHT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DRIVE_STRAIGHT
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRPM2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRPM1
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveToLineAction
</UL>

<P><STRONG><a name="[a4]"></a>DecrementBallsInPoss</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mastersm.o(i.DecrementBallsInPoss))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
</UL>

<P><STRONG><a name="[d]"></a>DetecterInterruptResponse</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, detecter_service.o(i.DetecterInterruptResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DetecterInterruptResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DisableControlPeriodicInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, reloadservice.o(i.DisableControlPeriodicInt))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitStateAction
</UL>

<P><STRONG><a name="[5a]"></a>DriveToLineAction</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, reloadservice.o(i.DriveToLineAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DriveToLineAction &rArr; SETRPM
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETRPM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVE_STRAIGHT
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
</UL>

<P><STRONG><a name="[6a]"></a>ES_CheckUserEvents</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, es_checkevents.o(i.ES_CheckUserEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[5b]"></a>ES_DeQueue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, es_queue.o(i.ES_DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[5e]"></a>ES_EnQueueFIFO</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, es_queue.o(i.ES_EnQueueFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>

<P><STRONG><a name="[65]"></a>ES_GetMSBitSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, es_lookuptables.o(i.ES_GetMSBitSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>

<P><STRONG><a name="[61]"></a>ES_InitQueue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_queue.o(i.ES_InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[5f]"></a>ES_Initialize</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, es_framework.o(i.ES_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ES_Initialize &rArr; ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_DebugLines_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>ES_PostToService</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_framework.o(i.ES_PostToService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTapeDetectorService
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStepService
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTapeDetectorService
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostShooter
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostReload
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostOffence
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDefence
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerBHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerAHandler
</UL>

<P><STRONG><a name="[64]"></a>ES_Run</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, es_framework.o(i.ES_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ES_Run &rArr; _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_DebugSetLine2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_DebugSetLine1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_DebugClearLine2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_DebugClearLine1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>ES_ShortTimerInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, es_shorttimer.o(i.ES_ShortTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ES_ShortTimerInit &rArr; TimerConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTapeDetectorService
</UL>

<P><STRONG><a name="[70]"></a>ES_ShortTimerStart</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, es_shorttimer.o(i.ES_ShortTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ES_ShortTimerStart &rArr; ShortTimerBHandler &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerBHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerAHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTapeDetectorService
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTapeDetectorService
</UL>

<P><STRONG><a name="[60]"></a>ES_Timer_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[7c]"></a>ES_Timer_InitTimer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDefence
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitStateAction
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTapeDetectorService
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStepService
</UL>

<P><STRONG><a name="[77]"></a>ES_Timer_Tick_Resp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, es_timers.o(i.ES_Timer_Tick_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
</UL>

<P><STRONG><a name="[78]"></a>EmitStateAction</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, reloadservice.o(i.EmitStateAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = EmitStateAction &rArr; blastBeaconFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableControlPeriodicInt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blastBeaconFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOP_MOTORS
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
</UL>

<P><STRONG><a name="[7e]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[7f]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[9a]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[7d]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunctionInit
</UL>

<P><STRONG><a name="[80]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[12]"></a>GameStatusEventChecker</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, spi.o(i.GameStatusEventChecker))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GameStatusEventChecker &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>GetAreWeAtTower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mastersm.o(i.GetAreWeAtTower))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
</UL>

<P><STRONG><a name="[a2]"></a>GetBallsInPoss</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mastersm.o(i.GetBallsInPoss))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
</UL>

<P><STRONG><a name="[8a]"></a>GetTapeValues</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tapedetectorservice.o(i.GetTapeValues))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
</UL>

<P><STRONG><a name="[93]"></a>IncrementBallsInPoss</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mastersm.o(i.IncrementBallsInPoss))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
</UL>

<P><STRONG><a name="[92]"></a>InitControlPeriodicInt</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, reloadservice.o(i.InitControlPeriodicInt))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
</UL>

<P><STRONG><a name="[1f]"></a>InitDefence</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defenceservice.o(i.InitDefence))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = InitDefence &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>InitDetecterService</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, detecter_service.o(i.InitDetecterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = InitDetecterService &rArr; PWM_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDetecterInterrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[a7]"></a>InitInputCapture</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, motorservice.o(i.InitInputCapture))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
</UL>

<P><STRONG><a name="[a8]"></a>InitInputCapture2</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, motorservice.o(i.InitInputCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
</UL>

<P><STRONG><a name="[17]"></a>InitMasterSM</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mastersm.o(i.InitMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = InitMasterSM &rArr; InitDetecterService &rArr; PWM_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDetecterService
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>InitOffence</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, offenceservice.o(i.InitOffence))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = InitOffence &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>InitPeriodicInt</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, motorservice.o(i.InitPeriodicInt))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
</UL>

<P><STRONG><a name="[1b]"></a>InitReload</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, reloadservice.o(i.InitReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = InitReload &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>InitShooter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shooterservice.o(i.InitShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = InitShooter &rArr; PWM_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Pulse_Width
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>InitTapeDetectorService</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tapedetectorservice.o(i.InitTapeDetectorService))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = InitTapeDetectorService &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>InitTestHarnessService0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testharnessservice0.o(i.InitTestHarnessService0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = InitTestHarnessService0 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>InputCaptureResponse</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, motorservice.o(i.InputCaptureResponse))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>InputCaptureResponse2</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, motorservice.o(i.InputCaptureResponse2))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[88]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[c]"></a>LFControlLaw</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, reloadservice.o(i.LFControlLaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LFControlLaw &rArr; getDetecterFreq &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDetecterFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTapeValues
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETRPM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>PWM_Init</STRONG> (Thumb, 1690 bytes, Stack size 40 bytes, pwmlib.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PWM_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDetecterService
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[56]"></a>PWM_SetDuty</STRONG> (Thumb, 442 bytes, Stack size 28 bytes, pwmlib.o(i.PWM_SetDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Pulse_Width
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blastBeaconFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlLaw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffLights
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[86]"></a>PWM_SetFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pwmlib.o(i.PWM_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blastBeaconFreq
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeStepService
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>

<P><STRONG><a name="[8d]"></a>PortFunctionInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, enablepa25_pb23_pd7_pf0.o(i.PortFunctionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PortFunctionInit &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>PostDefence</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defenceservice.o(i.PostDefence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostDefence &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>PostMasterSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mastersm.o(i.PostMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostMasterSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDefence
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameStatusEventChecker
</UL>

<P><STRONG><a name="[26]"></a>PostOffence</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, offenceservice.o(i.PostOffence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostOffence &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>PostReload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, reloadservice.o(i.PostReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostReload &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTapeDetectorService
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTowerDetected
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>PostShooter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shooterservice.o(i.PostShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostShooter &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>PostStepService</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motorservice.o(i.PostStepService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostStepService &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>PostTapeDetectorService</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tapedetectorservice.o(i.PostTapeDetectorService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostTapeDetectorService &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>RunDefence</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, defenceservice.o(i.RunDefence))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RunDefence &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOP_MOTORS
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETRPM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>RunMasterSM</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, mastersm.o(i.RunMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RunMasterSM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatusMessage
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostReload
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostOffence
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDefence
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffLights
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>RunOffence</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, offenceservice.o(i.RunOffence))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RunOffence &rArr; detStartOffenceState &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>RunReload</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, reloadservice.o(i.RunReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RunReload &rArr; detStartReloadState &rArr; EmitStateAction &rArr; blastBeaconFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementBallsInPoss
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartReloadState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitControlPeriodicInt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitStateAction
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignWithLineAction
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOP_MOTORS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>RunShooter</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, shooterservice.o(i.RunShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RunShooter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Pulse_Width
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>RunStepService</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motorservice.o(i.RunStepService))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RunStepService
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>RunTapeDetectorService</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tapedetectorservice.o(i.RunTapeDetectorService))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RunTapeDetectorService &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostReload
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>RunTestHarnessService0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testharnessservice0.o(i.RunTestHarnessService0))
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>SETRPM</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, motorservice.o(i.SETRPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SETRPM
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRPM2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRPM1
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDefence
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveToLineAction
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignWithLineAction
</UL>

<P><STRONG><a name="[a3]"></a>SPI_GetShotClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.SPI_GetShotClock))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detStartOffenceState
</UL>

<P><STRONG><a name="[8f]"></a>SPI_GetStatusMessage</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, spi.o(i.SPI_GetStatusMessage))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>

<P><STRONG><a name="[85]"></a>SPI_Init</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SPI_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitPeriodic
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[7]"></a>SPI_IntResponse</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, spi.o(i.SPI_IntResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_IntResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SPI_PeriodicResponse</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, spi.o(i.SPI_PeriodicResponse))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>STOP_MOTORS</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, motorservice.o(i.STOP_MOTORS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = STOP_MOTORS
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRPM2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRPM1
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDefence
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitStateAction
</UL>

<P><STRONG><a name="[58]"></a>SetRPM1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motorservice.o(i.SetRPM1))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOP_MOTORS
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETRPM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVE_STRAIGHT
</UL>

<P><STRONG><a name="[59]"></a>SetRPM2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motorservice.o(i.SetRPM2))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOP_MOTORS
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETRPM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVE_STRAIGHT
</UL>

<P><STRONG><a name="[8]"></a>ShortTimerAHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_shorttimer.o(i.ShortTimerAHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ShortTimerAHandler &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>ShortTimerBHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, es_shorttimer.o(i.ShortTimerBHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ShortTimerBHandler &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[98]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunctionInit
</UL>

<P><STRONG><a name="[a1]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[a0]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[6]"></a>SysTickIntHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i.SysTickIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[99]"></a>TERMIO_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, termio.o(i.TERMIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TERMIO_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>TERMIO_PutChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, termio.o(i.TERMIO_PutChar))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6e]"></a>TimerConfigure</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
</UL>

<P><STRONG><a name="[75]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[97]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerBHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortTimerAHandler
</UL>

<P><STRONG><a name="[73]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[72]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerStart
</UL>

<P><STRONG><a name="[6f]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_ShortTimerInit
</UL>

<P><STRONG><a name="[8e]"></a>TurnOffLights</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mastersm.o(i.TurnOffLights))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TurnOffLights &rArr; PWM_SetDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>

<P><STRONG><a name="[9e]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>

<P><STRONG><a name="[9b]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[9c]"></a>UARTStdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[67]"></a>_HW_DebugClearLine1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i._HW_DebugClearLine1))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[6b]"></a>_HW_DebugClearLine2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i._HW_DebugClearLine2))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[62]"></a>_HW_DebugLines_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, es_port.o(i._HW_DebugLines_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[66]"></a>_HW_DebugSetLine1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i._HW_DebugSetLine1))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[69]"></a>_HW_DebugSetLine2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i._HW_DebugSetLine2))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[68]"></a>_HW_Process_Pending_Ints</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, es_port.o(i._HW_Process_Pending_Ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[76]"></a>_HW_Timer_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, es_port.o(i._HW_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
</UL>

<P><STRONG><a name="[3f]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[7b]"></a>blastBeaconFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, detecter_service.o(i.blastBeaconFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = blastBeaconFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDetecterFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitStateAction
</UL>

<P><STRONG><a name="[11]"></a>checkTowerDetected</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mastersm.o(i.checkTowerDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = checkTowerDetected &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostReload
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>detStartOffenceState</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, offenceservice.o(i.detStartOffenceState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = detStartOffenceState &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBallsInPoss
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecrementBallsInPoss
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetShotClock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostShooter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunOffence
</UL>

<P><STRONG><a name="[91]"></a>detStartReloadState</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, reloadservice.o(i.detStartReloadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = detStartReloadState &rArr; EmitStateAction &rArr; blastBeaconFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAreWeAtTower
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitControlPeriodicInt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitStateAction
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveToLineAction
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignWithLineAction
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTapeValues
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReload
</UL>

<P><STRONG><a name="[4b]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>getDetecterFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, detecter_service.o(i.getDetecterFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getDetecterFreq &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blastBeaconFreq
</UL>

<P><STRONG><a name="[15]"></a>initializeStepService</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, motorservice.o(i.initializeStepService))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = initializeStepService &rArr; PWM_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPeriodicInt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitInputCapture2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitInputCapture
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunctionInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlLaw
</UL>

<P><STRONG><a name="[a9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlLaw
</UL>

<P><STRONG><a name="[ac]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Pulse_Width
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDetecterFreq
</UL>

<P><STRONG><a name="[af]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Pulse_Width
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDetecterFreq
</UL>

<P><STRONG><a name="[b0]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Pulse_Width
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDetecterFreq
</UL>

<P><STRONG><a name="[e3]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlLaw
</UL>

<P><STRONG><a name="[b1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ab]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[ae]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlLaw
</UL>

<P><STRONG><a name="[b2]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFControlLaw
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlLaw
</UL>

<P><STRONG><a name="[b4]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[b5]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[34]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[e4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[e5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[aa]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>SPI_InitPeriodic</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, spi.o(i.SPI_InitPeriodic))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[83]"></a>InitDetecterInterrupt</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, detecter_service.o(i.InitDetecterInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDetecterService
</UL>

<P><STRONG><a name="[87]"></a>Servo_Set_Pulse_Width</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, shooterservice.o(i.Servo_Set_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Servo_Set_Pulse_Width &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShooter
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
</UL>

<P><STRONG><a name="[3]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[ad]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
